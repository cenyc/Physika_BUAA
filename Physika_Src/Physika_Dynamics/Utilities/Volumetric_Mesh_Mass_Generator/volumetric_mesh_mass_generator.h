/*
 * @file volumetric_mesh_mass_generator.h 
 * @Brief given volumetric mesh and density, compute the mass needed for simulations that involve
 *            volumetric meshes, e.g., FEM.
 * @author Fei Zhu
 * 
 * This file is part of Physika, a versatile physics simulation library.
 * Copyright (C) 2013- Physika Group.
 *
 * This Source Code Form is subject to the terms of the GNU General Public License v2.0. 
 * If a copy of the GPL was not distributed with this file, you can obtain one at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 *
 */

#ifndef PHYSIKA_DYNAMICS_UTILITIES_VOLUMETRIC_MESH_MASS_GENERATOR_VOLUMETRIC_MESH_MASS_GENERATOR_H_
#define PHYSIKA_DYNAMICS_UTILITIES_VOLUMETRIC_MESH_MASS_GENERATOR_VOLUMETRIC_MESH_MASS_GENERATOR_H_

#include <vector>

namespace Physika{

template <typename Scalar, int Dim> class VolumetricMesh;
template <typename Scalar> class TriMesh;
template <typename Scalar> class TetMesh;
template <typename Scalar> class QuadMesh;
template <typename Scalar> class CubicMesh;
template <typename Scalar> class SparseMatrix;
template <typename Scalar> class MatrixMxN;

/*
 * The mass matrix generated by VolumetricMeshMassGenerator is an nxn matrix,
 *  where n is the vertex number of the mesh
 *  We do not duplicate the mass value in axis directions to save storage
 */

template <typename Scalar, int Dim>
class VolumetricMeshMassGenerator
{
public:
    //for methods where we pass density as a vector, the density could be either element-wise or region-wise
    enum DensityOption{
        ELEMENT_WISE,
        REGION_WISE
    };
public:
    VolumetricMeshMassGenerator(){}
    ~VolumetricMeshMassGenerator(){}
    //static methods
    //lumped mass, uniform density
    static void generateLumpedMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, Scalar density, std::vector<Scalar> &lumped_mass);
    static void generateLumpedMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, Scalar density, SparseMatrix<Scalar> &lumped_mass);
    //lumped mass, element-wise/region-wise density
    static void generateLumpedMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, const std::vector<Scalar> &density, std::vector<Scalar> &lumped_mass,
                                                        DensityOption option= ELEMENT_WISE);
    static void generateLumpedMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, const std::vector<Scalar> &density, SparseMatrix<Scalar> &lumped_mass,
                                                        DensityOption option= ELEMENT_WISE);
    //consistent mass matrix with uniform and element-wise/region density
    static void generateConsistentMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, Scalar density, SparseMatrix<Scalar> &consistent_mass);
    static void generateConsistentMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, const std::vector<Scalar> &density, SparseMatrix<Scalar> &consistent_mass,
                                                           DensityOption option= ELEMENT_WISE);

    //generate consistent mass matrix for specific element
    static void generateElementConsistentMass(const VolumetricMesh<Scalar,Dim> &volumetric_mesh, unsigned int ele_idx, Scalar density, MatrixMxN<Scalar> &ele_mass);
protected:
    static void generateElementConsistentMass(const TriMesh<Scalar> &tri_mesh, unsigned int ele_idx, Scalar density, MatrixMxN<Scalar> &ele_mass);
    static void generateElementConsistentMass(const TetMesh<Scalar> &tet_mesh, unsigned int ele_idx, Scalar density, MatrixMxN<Scalar> &ele_mass);
    static void generateElementConsistentMass(const QuadMesh<Scalar> &quad_mesh, unsigned int ele_idx, Scalar density, MatrixMxN<Scalar> &ele_mass);
    static void generateElementConsistentMass(const CubicMesh<Scalar> &cubic_mesh, unsigned int ele_idx, Scalar density, MatrixMxN<Scalar> &ele_mass);
};

} //end of namespace Physika

#endif  //PHYSIKA_DYNAMICS_UTILITIES_VOLUMETRIC_MESH_MASS_GENERATOR_VOLUMETRIC_MESH_MASS_GENERATOR_H_
